"""Tests for distributed computing components."""

import pytest\nimport ray\nimport numpy as np\nfrom unittest.mock import Mock, patch\n\nfrom swarm_arena import SwarmConfig\nfrom swarm_arena.core.agent import Agent, CooperativeAgent\nfrom swarm_arena.distributed import DistributedArena, DistributedConfig, ArenaWorker\nfrom swarm_arena.exceptions import RayError, SimulationError\n\n\nclass TestDistributedConfig:\n    \"\"\"Test DistributedConfig class.\"\"\"\n    \n    def test_default_config(self):\n        \"\"\"Test default distributed configuration.\"\"\"\n        config = DistributedConfig()\n        \n        assert config.num_workers == 4\n        assert config.agents_per_worker == 250\n        assert config.gpu_per_worker == 0.0\n        assert config.cpu_per_worker == 2\n        assert config.memory_per_worker == 2048\n        assert config.use_placement_groups is True\n        assert config.synchronization_method == \"barrier\"\n    \n    def test_custom_config(self):\n        \"\"\"Test custom distributed configuration.\"\"\"\n        config = DistributedConfig(\n            num_workers=8,\n            agents_per_worker=500,\n            gpu_per_worker=0.25,\n            synchronization_method=\"async\"\n        )\n        \n        assert config.num_workers == 8\n        assert config.agents_per_worker == 500\n        assert config.gpu_per_worker == 0.25\n        assert config.synchronization_method == \"async\"\n\n\nclass TestArenaWorkerMocked:\n    \"\"\"Test ArenaWorker with mocked Ray.\"\"\"\n    \n    def test_worker_initialization(self):\n        \"\"\"Test worker initialization without Ray.\"\"\"\n        config = SwarmConfig(num_agents=10, seed=42)\n        \n        # Create worker class (not Ray remote)\n        worker_class = ArenaWorker._ray_remote_class_body\n        worker = worker_class(\n            worker_id=0,\n            config=config,\n            agent_id_offset=0\n        )\n        \n        assert worker.worker_id == 0\n        assert worker.config.num_agents == 10\n        assert worker.agent_id_offset == 0\n        assert worker.arena is not None\n    \n    def test_worker_add_agents(self):\n        \"\"\"Test adding agents to worker.\"\"\"\n        config = SwarmConfig(num_agents=5, seed=42)\n        \n        worker_class = ArenaWorker._ray_remote_class_body\n        worker = worker_class(\n            worker_id=0,\n            config=config,\n            agent_id_offset=10  # Offset for global uniqueness\n        )\n        \n        # Add agents\n        worker.add_agents(Agent, count=3)\n        \n        assert len(worker.arena.agents) == 3\n        \n        # Check agent IDs have correct offset\n        agent_ids = list(worker.arena.agents.keys())\n        assert min(agent_ids) >= 10  # Should have offset\n    \n    def test_worker_reset(self):\n        \"\"\"Test worker reset functionality.\"\"\"\n        config = SwarmConfig(num_agents=3, seed=42)\n        \n        worker_class = ArenaWorker._ray_remote_class_body\n        worker = worker_class(worker_id=1, config=config, agent_id_offset=0)\n        \n        worker.add_agents(Agent, count=3)\n        \n        # Reset worker\n        result = worker.reset()\n        \n        assert result[\"worker_id\"] == 1\n        assert result[\"num_agents\"] == 3\n        assert \"arena_size\" in result\n        assert worker.step_count == 0\n        assert worker.total_step_time == 0.0\n    \n    def test_worker_step(self):\n        \"\"\"Test worker step execution.\"\"\"\n        config = SwarmConfig(num_agents=2, episode_length=10, seed=42)\n        \n        worker_class = ArenaWorker._ray_remote_class_body\n        worker = worker_class(worker_id=0, config=config, agent_id_offset=0)\n        \n        worker.add_agents(Agent, count=2)\n        worker.reset()\n        \n        # Execute step\n        obs, rewards, done, info = worker.step()\n        \n        assert isinstance(obs, dict)\n        assert isinstance(rewards, dict)\n        assert isinstance(done, bool)\n        assert isinstance(info, dict)\n        \n        assert \"worker_id\" in info\n        assert \"step_time\" in info\n        assert \"active_agents\" in info\n        assert worker.step_count == 1\n    \n    def test_worker_get_episode_rewards(self):\n        \"\"\"Test getting episode rewards from worker.\"\"\"\n        config = SwarmConfig(num_agents=2, seed=42)\n        \n        worker_class = ArenaWorker._ray_remote_class_body\n        worker = worker_class(worker_id=0, config=config, agent_id_offset=0)\n        \n        worker.add_agents(Agent, count=2)\n        worker.reset()\n        \n        # Run a few steps to generate rewards\n        for _ in range(5):\n            worker.step()\n        \n        rewards = worker.get_episode_rewards()\n        \n        assert isinstance(rewards, dict)\n        assert len(rewards) == 2  # Two agents\n        \n        for agent_id, total_reward in rewards.items():\n            assert isinstance(agent_id, int)\n            assert isinstance(total_reward, (int, float))\n    \n    def test_worker_get_agent_stats(self):\n        \"\"\"Test getting agent statistics from worker.\"\"\"\n        config = SwarmConfig(num_agents=2, seed=42)\n        \n        worker_class = ArenaWorker._ray_remote_class_body\n        worker = worker_class(worker_id=0, config=config, agent_id_offset=0)\n        \n        worker.add_agents(CooperativeAgent, count=2)\n        worker.reset()\n        \n        # Run a few steps\n        for _ in range(3):\n            worker.step()\n        \n        stats = worker.get_agent_stats()\n        \n        assert isinstance(stats, dict)\n        assert len(stats) == 2\n        \n        for agent_id, agent_stats in stats.items():\n            assert isinstance(agent_id, int)\n            assert isinstance(agent_stats, dict)\n            assert \"agent_id\" in agent_stats\n            assert \"total_reward\" in agent_stats\n            assert \"actions_taken\" in agent_stats\n    \n    def test_worker_shutdown(self):\n        \"\"\"Test worker shutdown.\"\"\"\n        config = SwarmConfig(num_agents=2, seed=42)\n        \n        worker_class = ArenaWorker._ray_remote_class_body\n        worker = worker_class(worker_id=0, config=config, agent_id_offset=0)\n        \n        worker.add_agents(Agent, count=2)\n        \n        # Shutdown should not raise errors\n        worker.shutdown()\n        \n        # Arena should be cleaned up\n        assert len(worker.arena.agents) == 0\n        assert len(worker.arena.agent_positions) == 0\n\n\nclass TestDistributedArenaMocked:\n    \"\"\"Test DistributedArena with mocked Ray.\"\"\"\n    \n    @patch('swarm_arena.distributed.ray_arena.ray')\n    def test_arena_initialization_ray_running(self, mock_ray):\n        \"\"\"Test arena initialization when Ray is already running.\"\"\"\n        mock_ray.is_initialized.return_value = True\n        \n        config = SwarmConfig(num_agents=100, seed=42)\n        distributed_config = DistributedConfig(num_workers=2, agents_per_worker=50)\n        \n        # Mock worker creation\n        mock_worker = Mock()\n        mock_ray.util.placement_group.return_value = Mock()\n        mock_ray.get.return_value = None\n        \n        with patch('swarm_arena.distributed.ray_arena.ArenaWorker') as mock_worker_class:\n            mock_worker_class.options.return_value.remote.return_value = mock_worker\n            \n            arena = DistributedArena(config, distributed_config)\n            \n            assert arena.config == config\n            assert arena.distributed_config == distributed_config\n            assert len(arena.workers) == 2\n    \n    @patch('swarm_arena.distributed.ray_arena.ray')\n    def test_arena_initialization_ray_not_running(self, mock_ray):\n        \"\"\"Test arena initialization when Ray is not running.\"\"\"\n        mock_ray.is_initialized.return_value = False\n        \n        config = SwarmConfig(num_agents=50, seed=42)\n        \n        with patch('swarm_arena.distributed.ray_arena.ArenaWorker'):\n            arena = DistributedArena(config)\n            \n            # Should initialize Ray\n            mock_ray.init.assert_called_once()\n    \n    @patch('swarm_arena.distributed.ray_arena.ray')\n    def test_worker_distribution_calculation(self, mock_ray):\n        \"\"\"Test calculation of optimal worker distribution.\"\"\"\n        mock_ray.is_initialized.return_value = True\n        \n        config = SwarmConfig(num_agents=1000)\n        distributed_config = DistributedConfig(num_workers=8, agents_per_worker=100)\n        \n        with patch('swarm_arena.distributed.ray_arena.ArenaWorker'):\n            arena = DistributedArena(config, distributed_config)\n            \n            # Should adjust to optimal distribution\n            assert arena.distributed_config.num_workers <= 8\n            assert arena.distributed_config.agents_per_worker >= 100\n    \n    @patch('swarm_arena.distributed.ray_arena.ray')\n    def test_worker_distribution_small_problem(self, mock_ray):\n        \"\"\"Test worker distribution for small problems.\"\"\"\n        mock_ray.is_initialized.return_value = True\n        \n        config = SwarmConfig(num_agents=50)  # Small problem\n        distributed_config = DistributedConfig(num_workers=8, agents_per_worker=250)\n        \n        with patch('swarm_arena.distributed.ray_arena.ArenaWorker'):\n            arena = DistributedArena(config, distributed_config)\n            \n            # Should use only 1 worker for small problems\n            assert arena.distributed_config.num_workers == 1\n            assert arena.distributed_config.agents_per_worker == 50\n    \n    @patch('swarm_arena.distributed.ray_arena.ray')\n    def test_add_agents(self, mock_ray):\n        \"\"\"Test adding agents to distributed arena.\"\"\"\n        mock_ray.is_initialized.return_value = True\n        mock_ray.get.return_value = None\n        \n        config = SwarmConfig(num_agents=100)\n        \n        # Mock workers\n        mock_workers = [Mock() for _ in range(2)]\n        for worker in mock_workers:\n            worker.add_agents.remote.return_value = Mock()\n        \n        with patch('swarm_arena.distributed.ray_arena.ArenaWorker'):\n            arena = DistributedArena(config)\n            arena.workers = mock_workers\n            \n            # Add agents\n            arena.add_agents(Agent, count=100)\n            \n            # Should distribute agents across workers\n            for worker in mock_workers:\n                worker.add_agents.remote.assert_called_once()\n    \n    @patch('swarm_arena.distributed.ray_arena.ray')\n    def test_reset(self, mock_ray):\n        \"\"\"Test distributed arena reset.\"\"\"\n        mock_ray.is_initialized.return_value = True\n        \n        # Mock worker reset results\n        reset_results = [\n            {\"num_agents\": 50, \"worker_id\": 0},\n            {\"num_agents\": 50, \"worker_id\": 1}\n        ]\n        mock_ray.get.return_value = reset_results\n        \n        config = SwarmConfig(num_agents=100)\n        \n        mock_workers = [Mock() for _ in range(2)]\n        for worker in mock_workers:\n            worker.reset.remote.return_value = Mock()\n        \n        with patch('swarm_arena.distributed.ray_arena.ArenaWorker'):\n            arena = DistributedArena(config)\n            arena.workers = mock_workers\n            \n            result = arena.reset()\n            \n            assert result[\"num_agents\"] == 100  # Total agents\n            assert result[\"num_workers\"] == 2\n            assert \"worker_results\" in result\n    \n    @patch('swarm_arena.distributed.ray_arena.ray')\n    def test_step_synchronous(self, mock_ray):\n        \"\"\"Test synchronous distributed step execution.\"\"\"\n        mock_ray.is_initialized.return_value = True\n        \n        # Mock step results from workers\n        step_results = [\n            ({0: {\"position\": [100, 100]}}, {0: 1.0}, False, {\"active_agents\": 1, \"step_time\": 0.01}),\n            ({1: {\"position\": [200, 200]}}, {1: 0.5}, False, {\"active_agents\": 1, \"step_time\": 0.02})\n        ]\n        mock_ray.get.return_value = step_results\n        \n        config = SwarmConfig(num_agents=2)\n        distributed_config = DistributedConfig(synchronization_method=\"barrier\")\n        \n        mock_workers = [Mock() for _ in range(2)]\n        \n        with patch('swarm_arena.distributed.ray_arena.ArenaWorker'):\n            arena = DistributedArena(config, distributed_config)\n            arena.workers = mock_workers\n            \n            obs, rewards, done, info = arena.step()\n            \n            assert len(obs) == 2  # Combined observations\n            assert len(rewards) == 2  # Combined rewards\n            assert done is False  # All workers must be done\n            assert info[\"total_active_agents\"] == 2\n            assert \"avg_step_time\" in info\n    \n    @patch('swarm_arena.distributed.ray_arena.ray')\n    def test_run_distributed_simulation(self, mock_ray):\n        \"\"\"Test running distributed simulation.\"\"\"\n        mock_ray.is_initialized.return_value = True\n        mock_ray.get.side_effect = [\n            # Reset results\n            [{\"num_agents\": 50} for _ in range(2)],\n            # Step results (simulate done after 2 steps)\n            [({}, {}, False, {\"active_agents\": 50, \"step_time\": 0.01}) for _ in range(2)],\n            [({}, {}, True, {\"active_agents\": 50, \"step_time\": 0.01}) for _ in range(2)],\n            # Episode rewards\n            [{0: 10.0, 1: 8.0}, {2: 12.0, 3: 9.0}],\n            # Agent stats\n            [{0: {\"total_reward\": 10.0}, 1: {\"total_reward\": 8.0}},\n             {2: {\"total_reward\": 12.0}, 3: {\"total_reward\": 9.0}}]\n        ]\n        \n        config = SwarmConfig(num_agents=4, episode_length=10)\n        \n        mock_workers = [Mock() for _ in range(2)]\n        \n        with patch('swarm_arena.distributed.ray_arena.ArenaWorker'):\n            arena = DistributedArena(config)\n            arena.workers = mock_workers\n            \n            results = arena.run(episodes=1, verbose=False)\n            \n            assert results.mean_reward > 0\n            assert len(results.agent_stats) == 4\n            assert results.total_steps > 0\n    \n    @patch('swarm_arena.distributed.ray_arena.ray')\n    def test_evaluate_scenarios(self, mock_ray):\n        \"\"\"Test scenario evaluation.\"\"\"\n        mock_ray.is_initialized.return_value = True\n        \n        # Mock scenario evaluation results\n        from swarm_arena.core.arena import SimulationResults\n        mock_result = SimulationResults()\n        mock_ray.get.return_value = [[mock_result, mock_result]]  # Results from workers\n        \n        config = SwarmConfig(num_agents=10)\n        scenarios = [{\"name\": \"test_scenario\", \"resource_spawn_rate\": 0.1}]\n        \n        mock_workers = [Mock()]\n        \n        with patch('swarm_arena.distributed.ray_arena.ArenaWorker'):\n            arena = DistributedArena(config)\n            arena.workers = mock_workers\n            \n            results = arena.evaluate_scenarios(scenarios)\n            \n            assert \"test_scenario\" in results\n            assert isinstance(results[\"test_scenario\"], SimulationResults)\n    \n    @patch('swarm_arena.distributed.ray_arena.ray')\n    def test_shutdown(self, mock_ray):\n        \"\"\"Test distributed arena shutdown.\"\"\"\n        mock_ray.is_initialized.return_value = True\n        mock_ray.get.return_value = [None, None]  # Shutdown results\n        \n        config = SwarmConfig(num_agents=10)\n        \n        mock_workers = [Mock() for _ in range(2)]\n        mock_placement_group = Mock()\n        \n        with patch('swarm_arena.distributed.ray_arena.ArenaWorker'):\n            arena = DistributedArena(config)\n            arena.workers = mock_workers\n            arena.placement_group = mock_placement_group\n            \n            arena.shutdown()\n            \n            # Should shutdown workers and remove placement group\n            for worker in mock_workers:\n                worker.shutdown.remote.assert_called_once()\n            \n            mock_ray.util.remove_placement_group.assert_called_once_with(mock_placement_group)\n            assert len(arena.workers) == 0\n            assert arena.placement_group is None\n\n\nclass TestDistributedIntegration:\n    \"\"\"Integration tests for distributed components.\"\"\"\n    \n    def test_worker_performance_stats(self):\n        \"\"\"Test worker performance statistics.\"\"\"\n        config = SwarmConfig(num_agents=3, seed=42)\n        \n        worker_class = ArenaWorker._ray_remote_class_body\n        worker = worker_class(worker_id=0, config=config, agent_id_offset=0)\n        \n        worker.add_agents(Agent, count=3)\n        worker.reset()\n        \n        # Run some steps\n        for _ in range(5):\n            worker.step()\n        \n        stats = worker.get_performance_stats()\n        \n        assert stats[\"worker_id\"] == 0\n        assert stats[\"total_steps\"] == 5\n        assert stats[\"agents_count\"] == 3\n        assert stats[\"avg_step_time\"] > 0\n    \n    def test_worker_scenario_evaluation(self):\n        \"\"\"Test worker scenario evaluation.\"\"\"\n        config = SwarmConfig(num_agents=2, episode_length=50, seed=42)\n        \n        worker_class = ArenaWorker._ray_remote_class_body\n        worker = worker_class(worker_id=0, config=config, agent_id_offset=0)\n        \n        worker.add_agents(Agent, count=2)\n        \n        scenario = {\"resource_spawn_rate\": 0.1, \"episode_length\": 20}\n        metrics = [\"efficiency\", \"fairness\"]\n        \n        result = worker.evaluate_scenario(scenario, metrics)\n        \n        assert result is not None\n        assert hasattr(result, 'mean_reward')\n        assert hasattr(result, 'agent_stats')\n    \n    def test_worker_run_episodes(self):\n        \"\"\"Test worker episode execution.\"\"\"\n        config = SwarmConfig(num_agents=2, episode_length=20, seed=42)\n        \n        worker_class = ArenaWorker._ray_remote_class_body\n        worker = worker_class(worker_id=0, config=config, agent_id_offset=0)\n        \n        worker.add_agents(CooperativeAgent, count=2)\n        \n        results = worker.run_episodes(episodes=2, verbose=False)\n        \n        assert results is not None\n        assert results.total_steps > 0\n        assert len(results.agent_stats) == 2\n        assert len(results.episode_rewards) == 2