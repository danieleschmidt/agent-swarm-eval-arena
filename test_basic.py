#!/usr/bin/env python3\n\"\"\"Basic tests without external dependencies.\"\"\"\n\nimport sys\nimport os\nfrom pathlib import Path\n\n# Add repo to path\nsys.path.insert(0, str(Path(__file__).parent))\n\ndef test_project_structure():\n    \"\"\"Test that project structure is correct.\"\"\"\n    print(\"üèóÔ∏è  Testing project structure...\")\n    \n    expected_files = [\n        \"swarm_arena/__init__.py\",\n        \"swarm_arena/core/__init__.py\",\n        \"swarm_arena/core/config.py\",\n        \"swarm_arena/core/agent.py\",\n        \"swarm_arena/core/arena.py\",\n        \"swarm_arena/core/environment.py\",\n        \"swarm_arena/utils/__init__.py\",\n        \"swarm_arena/utils/seeding.py\",\n        \"swarm_arena/utils/physics.py\",\n        \"swarm_arena/utils/logging.py\",\n        \"swarm_arena/utils/validation.py\",\n        \"swarm_arena/utils/monitoring.py\",\n        \"swarm_arena/distributed/__init__.py\",\n        \"swarm_arena/distributed/ray_arena.py\",\n        \"swarm_arena/distributed/worker.py\",\n        \"swarm_arena/monitoring/__init__.py\",\n        \"swarm_arena/monitoring/telemetry.py\",\n        \"swarm_arena/monitoring/streaming.py\",\n        \"swarm_arena/benchmarks/__init__.py\",\n        \"swarm_arena/benchmarks/standard.py\",\n        \"swarm_arena/benchmarks/scaling.py\",\n        \"swarm_arena/exceptions.py\",\n        \"examples/basic_usage.py\",\n        \"examples/distributed_example.py\",\n        \"examples/benchmark_example.py\",\n        \"tests/test_core.py\",\n        \"pyproject.toml\",\n        \"README.md\"\n    ]\n    \n    missing_files = []\n    for file_path in expected_files:\n        if not Path(file_path).exists():\n            missing_files.append(file_path)\n    \n    if missing_files:\n        print(f\"  ‚ùå Missing files: {missing_files}\")\n        return False\n    else:\n        print(f\"  ‚úÖ All {len(expected_files)} expected files present\")\n        return True\n\ndef test_python_syntax():\n    \"\"\"Test that all Python files have valid syntax.\"\"\"\n    print(\"\\nüêç Testing Python syntax...\")\n    \n    python_files = list(Path(\"swarm_arena\").rglob(\"*.py\"))\n    python_files.extend(Path(\"examples\").glob(\"*.py\"))\n    python_files.extend(Path(\"tests\").glob(\"*.py\"))\n    \n    syntax_errors = []\n    \n    for file_path in python_files:\n        try:\n            with open(file_path, 'r') as f:\n                content = f.read()\n            compile(content, str(file_path), 'exec')\n        except SyntaxError as e:\n            syntax_errors.append(f\"{file_path}: {e}\")\n        except Exception as e:\n            # Skip files that might have import errors\n            pass\n    \n    if syntax_errors:\n        print(f\"  ‚ùå Syntax errors found:\")\n        for error in syntax_errors:\n            print(f\"    {error}\")\n        return False\n    else:\n        print(f\"  ‚úÖ All {len(python_files)} Python files have valid syntax\")\n        return True\n\ndef test_import_structure():\n    \"\"\"Test basic import structure without external deps.\"\"\"\n    print(\"\\nüì¶ Testing import structure...\")\n    \n    try:\n        # Test that config can be imported (minimal dependencies)\n        import swarm_arena.exceptions\n        print(\"  ‚úÖ Exception classes importable\")\n        \n        # Test configuration structure\n        config_content = Path(\"swarm_arena/core/config.py\").read_text()\n        if \"class SwarmConfig\" in config_content and \"@dataclass\" in config_content:\n            print(\"  ‚úÖ SwarmConfig class structure correct\")\n        else:\n            print(\"  ‚ùå SwarmConfig class structure incorrect\")\n            return False\n        \n        # Test agent structure\n        agent_content = Path(\"swarm_arena/core/agent.py\").read_text()\n        if \"class BaseAgent\" in agent_content and \"@abstractmethod\" in agent_content:\n            print(\"  ‚úÖ Agent class structure correct\")\n        else:\n            print(\"  ‚ùå Agent class structure incorrect\")\n            return False\n        \n        return True\n        \n    except Exception as e:\n        print(f\"  ‚ùå Import structure test failed: {e}\")\n        return False\n\ndef test_configuration_completeness():\n    \"\"\"Test that configuration is complete.\"\"\"\n    print(\"\\n‚öôÔ∏è  Testing configuration completeness...\")\n    \n    try:\n        pyproject_content = Path(\"pyproject.toml\").read_text()\n        \n        required_sections = [\n            \"[build-system]\",\n            \"[project]\",\n            \"[project.dependencies]\",\n            \"[project.optional-dependencies]\",\n            \"[project.scripts]\"\n        ]\n        \n        missing_sections = []\n        for section in required_sections:\n            if section not in pyproject_content:\n                missing_sections.append(section)\n        \n        if missing_sections:\n            print(f\"  ‚ùå Missing pyproject.toml sections: {missing_sections}\")\n            return False\n        \n        # Check for key dependencies\n        required_deps = [\"numpy\", \"gymnasium\", \"ray\", \"websockets\", \"fastapi\"]\n        missing_deps = []\n        for dep in required_deps:\n            if dep not in pyproject_content:\n                missing_deps.append(dep)\n        \n        if missing_deps:\n            print(f\"  ‚ùå Missing key dependencies: {missing_deps}\")\n            return False\n        \n        print(\"  ‚úÖ Configuration complete with all required sections and dependencies\")\n        return True\n        \n    except Exception as e:\n        print(f\"  ‚ùå Configuration test failed: {e}\")\n        return False\n\ndef test_documentation():\n    \"\"\"Test documentation completeness.\"\"\"\n    print(\"\\nüìö Testing documentation...\")\n    \n    try:\n        readme_content = Path(\"README.md\").read_text()\n        \n        required_sections = [\n            \"# agent-swarm-eval-arena\",\n            \"## Overview\",\n            \"## Key Features\",\n            \"## Installation\",\n            \"## Quick Start\",\n            \"## Architecture\"\n        ]\n        \n        missing_sections = []\n        for section in required_sections:\n            if section not in readme_content:\n                missing_sections.append(section)\n        \n        if missing_sections:\n            print(f\"  ‚ùå Missing README sections: {missing_sections}\")\n            return False\n        \n        # Check README length (should be comprehensive)\n        if len(readme_content) < 10000:  # Reasonable minimum for comprehensive docs\n            print(f\"  ‚ùå README too short ({len(readme_content)} chars), may be incomplete\")\n            return False\n        \n        print(f\"  ‚úÖ Documentation complete ({len(readme_content)} chars, all sections present)\")\n        return True\n        \n    except Exception as e:\n        print(f\"  ‚ùå Documentation test failed: {e}\")\n        return False\n\ndef test_code_quality():\n    \"\"\"Test basic code quality metrics.\"\"\"\n    print(\"\\nüîç Testing code quality...\")\n    \n    try:\n        # Count lines of code\n        total_lines = 0\n        python_files = list(Path(\"swarm_arena\").rglob(\"*.py\"))\n        \n        for file_path in python_files:\n            with open(file_path, 'r') as f:\n                lines = f.readlines()\n                # Count non-empty, non-comment lines\n                code_lines = [l for l in lines if l.strip() and not l.strip().startswith('#')]\n                total_lines += len(code_lines)\n        \n        if total_lines < 1000:\n            print(f\"  ‚ùå Codebase too small ({total_lines} lines), may be incomplete\")\n            return False\n        \n        # Check for docstrings in key files\n        key_files = [\n            \"swarm_arena/core/arena.py\",\n            \"swarm_arena/core/agent.py\",\n            \"swarm_arena/core/environment.py\"\n        ]\n        \n        docstring_coverage = 0\n        for file_path in key_files:\n            content = Path(file_path).read_text()\n            if '\"\"\"' in content:\n                docstring_coverage += 1\n        \n        docstring_ratio = docstring_coverage / len(key_files)\n        if docstring_ratio < 0.8:\n            print(f\"  ‚ùå Low docstring coverage ({docstring_ratio:.1%}) in key files\")\n            return False\n        \n        print(f\"  ‚úÖ Good code quality ({total_lines} lines, {docstring_ratio:.1%} docstring coverage)\")\n        return True\n        \n    except Exception as e:\n        print(f\"  ‚ùå Code quality test failed: {e}\")\n        return False\n\ndef main():\n    \"\"\"Run all basic tests.\"\"\"\n    print(\"üß™ Running Basic Swarm Arena Tests (No External Dependencies)\")\n    print(\"=\" * 70)\n    \n    tests = [\n        (\"Project Structure\", test_project_structure),\n        (\"Python Syntax\", test_python_syntax),\n        (\"Import Structure\", test_import_structure),\n        (\"Configuration\", test_configuration_completeness),\n        (\"Documentation\", test_documentation),\n        (\"Code Quality\", test_code_quality)\n    ]\n    \n    results = []\n    for test_name, test_func in tests:\n        try:\n            result = test_func()\n            results.append((test_name, result))\n        except Exception as e:\n            print(f\"  ‚ùå {test_name} test crashed: {e}\")\n            results.append((test_name, False))\n    \n    # Summary\n    print(\"\\n\" + \"=\" * 70)\n    print(\"üìä TEST SUMMARY\")\n    print(\"-\" * 40)\n    \n    passed = sum(1 for _, result in results if result)\n    total = len(results)\n    \n    for test_name, result in results:\n        status = \"‚úÖ PASS\" if result else \"‚ùå FAIL\"\n        print(f\"{test_name:<20} {status}\")\n    \n    print(f\"\\nResults: {passed}/{total} tests passed ({passed/total*100:.1f}%)\")\n    \n    if passed == total:\n        print(\"\\nüéâ All basic tests passed! Project structure is solid.\")\n        print(\"\\nüìã Ready for:\")\n        print(\"  ‚Ä¢ Installation of dependencies (pip install -e .)\")\n        print(\"  ‚Ä¢ Full functional testing\")\n        print(\"  ‚Ä¢ Distributed execution with Ray\")\n        print(\"  ‚Ä¢ Large-scale benchmarking\")\n        return True\n    else:\n        print(f\"\\n‚ö†Ô∏è  {total-passed} tests failed. Please fix issues before proceeding.\")\n        return False\n\nif __name__ == \"__main__\":\n    success = main()\n    sys.exit(0 if success else 1)