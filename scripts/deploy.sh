#!/bin/bash\n\n# Swarm Arena Deployment Script\n# Usage: ./deploy.sh [environment] [mode]\n# Environment: dev, staging, prod\n# Mode: docker, k8s\n\nset -e\n\nENVIRONMENT=${1:-dev}\nMODE=${2:-docker}\n\necho \"ðŸš€ Deploying Swarm Arena\"\necho \"Environment: $ENVIRONMENT\"\necho \"Mode: $MODE\"\necho \"========================\"\n\n# Color codes for output\nRED='\\033[0;31m'\nGREEN='\\033[0;32m'\nYELLOW='\\033[1;33m'\nBLUE='\\033[0;34m'\nNC='\\033[0m' # No Color\n\n# Function to print colored output\nprint_status() {\n    echo -e \"${BLUE}[INFO]${NC} $1\"\n}\n\nprint_success() {\n    echo -e \"${GREEN}[SUCCESS]${NC} $1\"\n}\n\nprint_warning() {\n    echo -e \"${YELLOW}[WARNING]${NC} $1\"\n}\n\nprint_error() {\n    echo -e \"${RED}[ERROR]${NC} $1\"\n}\n\n# Validate environment\nif [[ ! \"$ENVIRONMENT\" =~ ^(dev|staging|prod)$ ]]; then\n    print_error \"Invalid environment: $ENVIRONMENT. Must be dev, staging, or prod.\"\n    exit 1\nfi\n\n# Validate mode\nif [[ ! \"$MODE\" =~ ^(docker|k8s)$ ]]; then\n    print_error \"Invalid mode: $MODE. Must be docker or k8s.\"\n    exit 1\nfi\n\n# Check prerequisites\ncheck_prerequisites() {\n    print_status \"Checking prerequisites...\"\n    \n    if [ \"$MODE\" = \"docker\" ]; then\n        if ! command -v docker &> /dev/null; then\n            print_error \"Docker is not installed\"\n            exit 1\n        fi\n        \n        if ! command -v docker-compose &> /dev/null; then\n            print_error \"Docker Compose is not installed\"\n            exit 1\n        fi\n    fi\n    \n    if [ \"$MODE\" = \"k8s\" ]; then\n        if ! command -v kubectl &> /dev/null; then\n            print_error \"kubectl is not installed\"\n            exit 1\n        fi\n        \n        if ! kubectl cluster-info &> /dev/null; then\n            print_error \"No Kubernetes cluster connection\"\n            exit 1\n        fi\n    fi\n    \n    print_success \"Prerequisites check passed\"\n}\n\n# Build application\nbuild_application() {\n    print_status \"Building Swarm Arena application...\"\n    \n    # Build Docker image\n    docker build -t swarm-arena:latest -f docker/Dockerfile .\n    \n    if [ $? -eq 0 ]; then\n        print_success \"Application built successfully\"\n    else\n        print_error \"Application build failed\"\n        exit 1\n    fi\n}\n\n# Deploy with Docker\ndeploy_docker() {\n    print_status \"Deploying with Docker Compose...\"\n    \n    # Set environment-specific compose file\n    COMPOSE_FILE=\"docker/docker-compose.yml\"\n    if [ -f \"docker/docker-compose.$ENVIRONMENT.yml\" ]; then\n        COMPOSE_FILE=\"$COMPOSE_FILE:docker/docker-compose.$ENVIRONMENT.yml\"\n    fi\n    \n    # Deploy\n    COMPOSE_FILE=$COMPOSE_FILE docker-compose up -d\n    \n    if [ $? -eq 0 ]; then\n        print_success \"Docker deployment successful\"\n        \n        # Show service status\n        print_status \"Service status:\"\n        docker-compose ps\n        \n        print_status \"Access points:\"\n        echo \"  â€¢ Swarm Arena WebSocket: ws://localhost:8765\"\n        echo \"  â€¢ Swarm Arena HTTP API: http://localhost:8080\"\n        echo \"  â€¢ Ray Dashboard: http://localhost:8265\"\n        echo \"  â€¢ Grafana: http://localhost:3000 (admin/swarm-arena-admin)\"\n        echo \"  â€¢ Prometheus: http://localhost:9090\"\n    else\n        print_error \"Docker deployment failed\"\n        exit 1\n    fi\n}\n\n# Deploy to Kubernetes\ndeploy_k8s() {\n    print_status \"Deploying to Kubernetes...\"\n    \n    # Create namespace\n    kubectl apply -f k8s/namespace.yaml\n    \n    # Apply secrets and config\n    kubectl apply -f k8s/secrets.yaml\n    \n    # Deploy Ray cluster\n    kubectl apply -f k8s/ray-cluster.yaml\n    \n    # Wait for Ray head to be ready\n    print_status \"Waiting for Ray head to be ready...\"\n    kubectl wait --for=condition=ready pod -l app=ray-head -n swarm-arena --timeout=300s\n    \n    # Deploy main application\n    kubectl apply -f k8s/deployment.yaml\n    \n    # Wait for deployment to be ready\n    print_status \"Waiting for deployment to be ready...\"\n    kubectl wait --for=condition=available deployment/swarm-arena -n swarm-arena --timeout=300s\n    \n    if [ $? -eq 0 ]; then\n        print_success \"Kubernetes deployment successful\"\n        \n        # Show deployment status\n        print_status \"Deployment status:\"\n        kubectl get pods -n swarm-arena\n        \n        # Get service endpoints\n        print_status \"Getting service endpoints...\"\n        kubectl get services -n swarm-arena\n        \n        # Port forward for local access (optional)\n        if [ \"$ENVIRONMENT\" = \"dev\" ]; then\n            print_status \"Setting up port forwarding for development...\"\n            kubectl port-forward -n swarm-arena service/swarm-arena-service 8080:8080 8765:8765 &\n            kubectl port-forward -n swarm-arena service/ray-head-service 8265:8265 &\n            \n            print_success \"Port forwarding active:\"\n            echo \"  â€¢ Swarm Arena: http://localhost:8080, ws://localhost:8765\"\n            echo \"  â€¢ Ray Dashboard: http://localhost:8265\"\n        fi\n    else\n        print_error \"Kubernetes deployment failed\"\n        exit 1\n    fi\n}\n\n# Health check\nhealth_check() {\n    print_status \"Performing health check...\"\n    \n    sleep 10  # Wait for services to start\n    \n    if [ \"$MODE\" = \"docker\" ]; then\n        # Check if containers are running\n        if docker-compose ps | grep -q \"Up\"; then\n            print_success \"Health check passed - services are running\"\n        else\n            print_warning \"Some services may not be healthy\"\n        fi\n    fi\n    \n    if [ \"$MODE\" = \"k8s\" ]; then\n        # Check pod status\n        READY_PODS=$(kubectl get pods -n swarm-arena --no-headers | grep \"Running\" | wc -l)\n        TOTAL_PODS=$(kubectl get pods -n swarm-arena --no-headers | wc -l)\n        \n        if [ \"$READY_PODS\" -eq \"$TOTAL_PODS\" ]; then\n            print_success \"Health check passed - all pods running ($READY_PODS/$TOTAL_PODS)\"\n        else\n            print_warning \"Some pods are not ready ($READY_PODS/$TOTAL_PODS)\"\n        fi\n    fi\n}\n\n# Cleanup function\ncleanup() {\n    print_status \"Cleaning up on exit...\"\n    # Add any cleanup tasks here\n}\n\n# Set trap for cleanup\ntrap cleanup EXIT\n\n# Main deployment flow\nmain() {\n    print_status \"Starting Swarm Arena deployment\"\n    \n    check_prerequisites\n    build_application\n    \n    if [ \"$MODE\" = \"docker\" ]; then\n        deploy_docker\n    elif [ \"$MODE\" = \"k8s\" ]; then\n        deploy_k8s\n    fi\n    \n    health_check\n    \n    print_success \"Deployment completed successfully!\"\n    print_status \"Run './scripts/status.sh $ENVIRONMENT $MODE' to check status\"\n    print_status \"Run './scripts/logs.sh $ENVIRONMENT $MODE' to view logs\"\n    print_status \"Run './scripts/cleanup.sh $ENVIRONMENT $MODE' to cleanup\"\n}\n\n# Run main function\nmain"